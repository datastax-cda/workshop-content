description: |
  A tabular workload with partitions, clusters, and data fields
  This workload contains partitioning and cluster along with a set
  of 8 fields of varying length. The field values vary in size according
  to the fibonacci sequence times a base size factor of 10, with
  an additional 10% variance for each field.
  The read patterns have a variety of field subsets specified.

  During rampup, all rows will be written partition by partition,
  filling in all rows of that partition before moving on to the next.
  Example: With a partition size of 1000 and 1B rows, there will be
  1000000 partitions.

  During main phase, the read patterns are varied with different
  field sets. As well, the number of rows which will be returned
  is varied betweeen 1 and 10.

  By default, reads occur at the same ratio as writes, with main
  phase writes writing full rows.


scenarios:
  default:
    schema: run driver=cql tags==phase:schema threads==1 cycles==UNDEF
    rampup: run driver=cql tags==phase:rampup cycles===TEMPLATE(rampup-cycles,10B) threads=auto
    main: run driver=cql tags==phase:main cycles===TEMPLATE(main-cycles,100M) threads=auto
  schema: run driver=cql tags==phase:schema threads==1 cycles==UNDEF
  rampup: run driver=cql tags==phase:rampup cycles===TEMPLATE(rampup-cycles,10B) threads=auto
  main: run driver=cql tags==phase:main cycles===TEMPLATE(main-cycles,100M) threads=auto
  astra:
    schema: run driver=cql tags==phase:schema-astra threads==1 cycles==UNDEF
    rampup: run driver=cql tags==phase:rampup cycles===TEMPLATE(rampup-cycles,1000) threads=auto
    main: run driver=cql tags==phase:main cycles===TEMPLATE(main-cycles,10000) threads=auto

params:
  instrument: true
bindings:

  # for ramp-up and verify phases
  #
  part_layout: Div(<<partsize:1000>>); ToString() -> String
  clust_layout: Mod(<<partsize:1000>>); ToString() -> String
  # todo: update these definitions to use the simpler 10,0.1, 20, 0.2, ...
  data0: Add(10); HashedFileExtractToString('data/lorem_ipsum_full.txt',9,11)
  data1: Add(20); HashedFileExtractToString('data/lorem_ipsum_full.txt',18,22)
  data2: Add(30); HashedFileExtractToString('data/lorem_ipsum_full.txt',27,33)
  data3: Add(40); HashedFileExtractToString('data/lorem_ipsum_full.txt',45,55)
  data4: Add(50); HashedFileExtractToString('data/lorem_ipsum_full.txt',72,88)
  data5: Add(60); HashedFileExtractToString('data/lorem_ipsum_full.txt',107,143)
  data6: Add(70); HashedFileExtractToString('data/lorem_ipsum_full.txt',189,231)
  data7: Add(80); HashedFileExtractToString('data/lorem_ipsum_full.txt',306,374)

  # for main phase
  # for write
  part_write: Hash(); Uniform(0,<<partcount:100>>)->int; ToString() -> String
  clust_write: Hash(); Add(1); Uniform(0,<<partsize:1000000>>)->int; ToString() -> String
  data_write: Hash(); HashedFileExtractToString('data/lorem_ipsum_full.txt',50,150) -> String

  # for read
  limit: Uniform(1,10) -> int
  part_read: Uniform(0,<<partcount:100>>)->int; ToString() -> String
  clust_read: Add(1); Uniform(0,<<partsize:1000000>>)->int; ToString() -> String

blocks:
  - name: schema
    tags:
      phase: schema
    params:
      prepared: false
    statements:
      - create-keyspace: |
          create keyspace if not exists <<keyspace:baselines>>
          WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '<<rf:1>>'}
          AND durable_writes = true;
        tags:
          name: create-keyspace
      - create-table: |
          create table if not exists <<keyspace:baselines>>.<<table:tabular>> (
           part text,
           clust text,
           data0 text, data1 text, data2 text, data3 text,
           data4 text, data5 text, data6 text, data7 text,
           PRIMARY KEY (part,clust)
          );
        tags:
          name: create-table
  - name: schema-astra
    tags:
      phase: schema-astra
    params:
      prepared: false
    statements:
      - create-table: |
          create table if not exists <<keyspace:baselines>>.<<table:tabular>> (
           part text,
           clust text,
           data0 text, data1 text, data2 text, data3 text,
           data4 text, data5 text, data6 text, data7 text,
           PRIMARY KEY (part,clust)
          );
        tags:
          name: create-table-astra
  - name: rampup
    tags:
      phase: rampup
    params:
      cl: <<write_cl:LOCAL_QUORUM>>
    statements:
      - rampup-insert: |
          insert into <<keyspace:baselines>>.<<table:tabular>>
          (part,clust,data0,data1,data2,data3,data4,data5,data6,data7)
          values ({part_layout},{clust_layout},{data0},{data1},{data2},{data3},{data4},{data5},{data6},{data7})
        tags:
          name: rampup-insert
  - name: verify
    tags:
      phase: verify
      type: read
    params:
      cl: <<read_cl:LOCAL_QUORUM>>
    statements:
      - verify-select: |
          select * from <<keyspace:baselines>>.<<table:tabular>> where part={part_layout} and clust={clust_layout}
        tags:
          name: verify-select
  - name: main-read
    tags:
      phase: main
      type: read
    params:
      ratio: 1
      cl: <<read_cl:LOCAL_QUORUM>>
    statements:
      - main-select-all: |
          select * from <<keyspace:baselines>>.<<table:tabular>> where part={part_read} limit {limit};
        tags:
          name: main-select-01
      - main-select-01: |
          select data0,data1 from <<keyspace:baselines>>.<<table:tabular>> where part={part_read} limit {limit};
        tags:
          name: main-select-0246
      - main-select-0246: |
          select data0,data2,data4,data6 from <<keyspace:baselines>>.<<table:tabular>> where part={part_read} limit {limit};
        tags:
          name: main-select-1357
      - main-select-1357: |
          select data1,data3,data5,data7 from <<keyspace:baselines>>.<<table:tabular>> where part={part_read} limit {limit};
        tags:
          name: main-select-0123
      - main-select-0123: |
          select data0,data1,data2,data3 from <<keyspace:baselines>>.<<table:tabular>> where part={part_read} limit {limit};
        tags:
          name: main-select-4567
      - main-select-4567: |
          select data4,data5,data6,data7 from <<keyspace:baselines>>.<<table:tabular>> where part={part_read} limit {limit};
        tags:
          name: main-select-01234567
      - main-select: |
          select * from <<keyspace:baselines>>.<<table:tabular>> where part={part_read} limit {limit};
        tags:
          name: main-select
  - name: main-write
    tags:
      phase: main
      type: write
    params:
      ratio: 8
      cl: <<write_cl:LOCAL_QUORUM>>
    statements:
      - main-write: |
          insert into <<keyspace:baselines>>.<<table:tabular>>
          (part, clust, data0,data1,data2,data3,data4,data5,data6,data7)
          values ({part_write},{clust_write},{data0},{data1},{data2},{data3},{data4},{data5},{data6},{data7})
        tags:
          name: main-write
